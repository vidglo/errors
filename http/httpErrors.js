const {
  BAD_GATEWAY,
  BAD_REQUEST,
  CONFLICT,
  EXPECTATION_FAILED,
  FAILED_DEPENDENCY,
  FORBIDDEN,
  GATEWAY_TIMEOUT,
  GONE,
  HTTP_VERSION_NOT_SUPPORTED,
  IM_A_TEAPOT,
  INSUFFICIENT_SPACE_ON_RESOURCE,
  INSUFFICIENT_STORAGE,
  INTERNAL_SERVER_ERROR,
  LENGTH_REQUIRED,
  LOCKED,
  METHOD_FAILURE,
  METHOD_NOT_ALLOWED,
  NETWORK_AUTHENTICATION_REQUIRED,
  NOT_ACCEPTABLE,
  NOT_FOUND,
  NOT_IMPLEMENTED,
  PAYMENT_REQUIRED,
  PRECONDITION_FAILED,
  PRECONDITION_REQUIRED,
  PROXY_AUTHENTICATION_REQUIRED,
  REQUEST_HEADER_FIELDS_TOO_LARGE,
  REQUEST_TIMEOUT,
  REQUEST_TOO_LONG,
  REQUEST_URI_TOO_LONG,
  REQUESTED_RANGE_NOT_SATISFIABLE,
  SERVICE_UNAVAILABLE,
  TOO_MANY_REQUESTS,
  UNAUTHORIZED,
  UNPROCESSABLE_ENTITY,
  UNSUPPORTED_MEDIA_TYPE,
  getStatusText
} = require('http-status-codes');

const createError = (name, statusCode) =>
  (message = getStatusText(statusCode)) =>
    Object.assign(Error(message), { statusCode, name });

const HTTPErrorFactories = {
  BadGateway: createError('BadGatewayError', BAD_GATEWAY),
  BadRequest: createError('BadRequestError', BAD_REQUEST),
  Conflict: createError('ConflictError', CONFLICT),
  ExpectationFailed: createError('ExpectationFailedError', EXPECTATION_FAILED),
  FailedDependency: createError('FailedDependencyError', FAILED_DEPENDENCY),
  Forbidden: createError('ForbiddenError', FORBIDDEN),
  GatewayTimeout: createError('GatewayTimeoutError', GATEWAY_TIMEOUT),
  Gone: createError('GoneError', GONE),
  HTTPVersionNotSupported: createError('HTTPVersionNotSupportedError', HTTP_VERSION_NOT_SUPPORTED),
  ImATeapot: createError('ImATeapotError', IM_A_TEAPOT),
  InsufficientSpaceOnResource: createError('InsufficientSpaceOnResourceError', INSUFFICIENT_SPACE_ON_RESOURCE),
  InsufficientStorage: createError('InsufficientStorageError', INSUFFICIENT_STORAGE),
  InternalServerError: createError('InternalServerError', INTERNAL_SERVER_ERROR),
  LengthRequired: createError('LengthRequiredError', LENGTH_REQUIRED),
  Locked: createError('LockedError', LOCKED),
  MethodFailure: createError('MethodFailureError', METHOD_FAILURE),
  MethodNotAllowed: createError('MethodNotAllowedError', METHOD_NOT_ALLOWED),
  NetworkAuthenticationRequired: createError('NetworkAuthenticationRequiredError', NETWORK_AUTHENTICATION_REQUIRED),
  NotAcceptable: createError('NotAcceptableError', NOT_ACCEPTABLE),
  NotFound: createError('NotFoundError', NOT_FOUND),
  NotImplemented: createError('NotImplementedError', NOT_IMPLEMENTED),
  PaymentRequired: createError('PaymentRequiredError', PAYMENT_REQUIRED),
  PreconditionFailed: createError('PreconditionFailedError', PRECONDITION_FAILED),
  PreconditionRequired: createError('PreconditionRequiredError', PRECONDITION_REQUIRED),
  ProxyAuthenticationRequired: createError('ProxyAuthenticationRequiredError', PROXY_AUTHENTICATION_REQUIRED),
  RequestHeaderFieldsTooLarge: createError('RequestHeaderFieldsTooLargeError', REQUEST_HEADER_FIELDS_TOO_LARGE),
  RequestTimeout: createError('RequestTimeoutError', REQUEST_TIMEOUT),
  RequestTooLong: createError('RequestTooLongError', REQUEST_TOO_LONG),
  RequestURITooLong: createError('RequestURITooLongError', REQUEST_URI_TOO_LONG),
  RequestedRangeNotSatisfiable: createError('RequestedRangeNotSatisfiableError', REQUESTED_RANGE_NOT_SATISFIABLE),
  ServiceUnavailable: createError('ServiceUnavailableError', SERVICE_UNAVAILABLE),
  TooManyRequests: createError('TooManyRequestsError', TOO_MANY_REQUESTS),
  Unauthorized: createError('UnauthorizedError', UNAUTHORIZED),
  UnprocessableEntity: createError('UnprocessableEntityError', UNPROCESSABLE_ENTITY),
  UnsupportedMediaType: createError('UnsupportedMediaTypeError', UNSUPPORTED_MEDIA_TYPE),
};

module.exports = HTTPErrorFactories;
